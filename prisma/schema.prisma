generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username               String                @unique @db.VarChar(100)
  email                  String                @unique
  artist_name            String                @db.VarChar(100)
  description            String?
  profile_picture        String                @default("Default")
  user_id                String                @id
  date_of_birth          DateTime?
  member_since           DateTime              @default(now())
  album_ratings          AlbumRating[]
  albums                 Album[]
  received_notifications CommentNotification[] @relation("receiver")
  sent_notifications     CommentNotification[] @relation("sender")
  comments               Comment[]
  followers              Follow[]              @relation("follower")
  following              Follow[]              @relation("following")
  song_ratings           SongRating[]
  songs                  Song[]

  @@map("users")
}

model Song {
  song_id     Int          @id @default(autoincrement())
  title       String       @db.VarChar(100)
  album_id    Int
  reference   String
  is_featured Boolean      @default(false)
  user_id     String
  description String?
  created_at  DateTime     @default(now())
  index       Int
  comments    Comment[]
  ratings     SongRating[]
  album       Album        @relation(fields: [album_id], references: [album_id], onDelete: Cascade)
  artist      User         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("songs")
}

model Album {
  album_id              Int           @id @default(autoincrement())
  title                 String        @db.VarChar(100)
  back_cover_reference  String?
  front_cover_reference String        @default("Default")
  is_featured           Boolean       @default(false)
  user_id               String
  description           String?
  created_at            DateTime      @default(now())
  ratings               AlbumRating[]
  artist                User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  comments              Comment[]
  songs                 Song[]

  @@map("albums")
}

model Comment {
  comment_id     Int                   @id @default(autoincrement())
  user_id        String
  song_id        Int?
  album_id       Int?
  body           String
  created_at     DateTime              @default(now())
  replying_to_id Int?
  notifications  CommentNotification[]
  album          Album?                @relation(fields: [album_id], references: [album_id], onDelete: Cascade)
  replying_to    Comment?              @relation("CommentReplies", fields: [replying_to_id], references: [comment_id], onDelete: Cascade)
  replies        Comment[]             @relation("CommentReplies")
  song           Song?                 @relation(fields: [song_id], references: [song_id], onDelete: Cascade)
  author         User                  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("comments")
}

model SongRating {
  user_id    String
  song_id    Int
  score      Decimal @db.Decimal(3, 1)
  is_visible Boolean @default(false)
  song       Song    @relation(fields: [song_id], references: [song_id], onDelete: Cascade)
  user       User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, song_id])
  @@map("song_ratings")
}

model AlbumRating {
  user_id    String
  album_id   Int
  score      Decimal @db.Decimal(3, 1)
  is_visible Boolean @default(false)
  album      Album   @relation(fields: [album_id], references: [album_id], onDelete: Cascade)
  user       User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, album_id])
  @@map("album_ratings")
}

model Follow {
  following_id String
  follower_id  String
  follower     User   @relation("follower", fields: [follower_id], references: [user_id], onDelete: Cascade)
  following    User   @relation("following", fields: [following_id], references: [user_id], onDelete: Cascade)

  @@id([following_id, follower_id])
  @@map("follows")
}

model CommentNotification {
  comment_notification_id Int      @id @default(autoincrement())
  sender_id               String
  receiver_id             String
  comment_id              Int
  message                 String
  is_viewed               Boolean  @default(false)
  created_at              DateTime @default(now())
  comment                 Comment  @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade)
  receiver                User     @relation("receiver", fields: [receiver_id], references: [user_id], onDelete: Cascade)
  sender                  User     @relation("sender", fields: [sender_id], references: [user_id], onDelete: Cascade)

  @@map("comment_notifications")
}
